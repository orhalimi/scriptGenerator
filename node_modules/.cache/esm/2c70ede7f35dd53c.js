let Splitter,helpers;_f35‍.w("./splitter",[["default",["Splitter"],function(v){Splitter=v}]]);_f35‍.w("./helpers",[["default",["helpers"],function(v){helpers=v}]]);const json = require('./tamplates/exampleSimple.json');



function createExeFiles(config, input =[]) {
    // try {
        const {        
            experimentTask,
            experimentParam,
            experimentValues,
        } = helpers.getExperiment(config)

        const splitter = new Splitter(config)
        splitter.splitTasks();
        splitter.insertExperimentData({experimentTask, experimentParam, experimentValues})

        let file = ''
        let codeChunk ='';

        for(let task of splitter.individualTasks){
            if(task === experimentTask) codeChunk += helpers.taskToExeCommands({task, config, experimentParam, experimentValues})
            else codeChunk += helpers.taskToExeCommands({task, config})
        }

        for(let graphId in splitter.taskGraphs ){
            codeChunk += splitter.taskGraphs[graphId].graphToExeCommands(config)
        }


        _f35‍.g.console.log(codeChunk);

        // for(let task)

        // for (let gId in splitter.taskGraphs){
        //     console.log(splitter.taskGraphs[gId]._experimentMembers)
        //     break;
        // }

}


createExeFiles(json, ['x'])